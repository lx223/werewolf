/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.werewolf.CreateAndJoinRoomRequest', null, global);
goog.exportSymbol('proto.werewolf.CreateAndJoinRoomResponse', null, global);
goog.exportSymbol('proto.werewolf.Game', null, global);
goog.exportSymbol('proto.werewolf.Game.State', null, global);
goog.exportSymbol('proto.werewolf.GetRoomRequest', null, global);
goog.exportSymbol('proto.werewolf.GetRoomResponse', null, global);
goog.exportSymbol('proto.werewolf.JoinRoomRequest', null, global);
goog.exportSymbol('proto.werewolf.JoinRoomResponse', null, global);
goog.exportSymbol('proto.werewolf.ReassignRolesRequest', null, global);
goog.exportSymbol('proto.werewolf.ReassignRolesResponse', null, global);
goog.exportSymbol('proto.werewolf.Role', null, global);
goog.exportSymbol('proto.werewolf.Room', null, global);
goog.exportSymbol('proto.werewolf.Ruling', null, global);
goog.exportSymbol('proto.werewolf.Seat', null, global);
goog.exportSymbol('proto.werewolf.StartGameRequest', null, global);
goog.exportSymbol('proto.werewolf.StartGameResponse', null, global);
goog.exportSymbol('proto.werewolf.TakeActionRequest', null, global);
goog.exportSymbol('proto.werewolf.TakeActionRequest.CompleteDarknessAction', null, global);
goog.exportSymbol('proto.werewolf.TakeActionRequest.CompleteSheriffAction', null, global);
goog.exportSymbol('proto.werewolf.TakeActionRequest.GuardAction', null, global);
goog.exportSymbol('proto.werewolf.TakeActionRequest.HalfBloodAction', null, global);
goog.exportSymbol('proto.werewolf.TakeActionRequest.HunterAction', null, global);
goog.exportSymbol('proto.werewolf.TakeActionRequest.SeerAction', null, global);
goog.exportSymbol('proto.werewolf.TakeActionRequest.WerewolfAction', null, global);
goog.exportSymbol('proto.werewolf.TakeActionRequest.WitchAction', null, global);
goog.exportSymbol('proto.werewolf.TakeActionResponse', null, global);
goog.exportSymbol('proto.werewolf.TakeActionResponse.HunterResult', null, global);
goog.exportSymbol('proto.werewolf.TakeActionResponse.SeerResult', null, global);
goog.exportSymbol('proto.werewolf.TakeSeatRequest', null, global);
goog.exportSymbol('proto.werewolf.TakeSeatResponse', null, global);
goog.exportSymbol('proto.werewolf.UpdateGameConfigRequest', null, global);
goog.exportSymbol('proto.werewolf.UpdateGameConfigRequest.RoleCount', null, global);
goog.exportSymbol('proto.werewolf.UpdateGameConfigResponse', null, global);
goog.exportSymbol('proto.werewolf.User', null, global);
goog.exportSymbol('proto.werewolf.VacateSeatRequest', null, global);
goog.exportSymbol('proto.werewolf.VacateSeatResponse', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.werewolf.VacateSeatRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.werewolf.VacateSeatRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.werewolf.VacateSeatRequest.displayName = 'proto.werewolf.VacateSeatRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.werewolf.VacateSeatRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.werewolf.VacateSeatRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.werewolf.VacateSeatRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.werewolf.VacateSeatRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    seatId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.werewolf.VacateSeatRequest}
 */
proto.werewolf.VacateSeatRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.werewolf.VacateSeatRequest;
  return proto.werewolf.VacateSeatRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.werewolf.VacateSeatRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.werewolf.VacateSeatRequest}
 */
proto.werewolf.VacateSeatRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSeatId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.werewolf.VacateSeatRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.werewolf.VacateSeatRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.werewolf.VacateSeatRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.werewolf.VacateSeatRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSeatId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string seat_id = 1;
 * @return {string}
 */
proto.werewolf.VacateSeatRequest.prototype.getSeatId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.werewolf.VacateSeatRequest.prototype.setSeatId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.werewolf.VacateSeatResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.werewolf.VacateSeatResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.werewolf.VacateSeatResponse.displayName = 'proto.werewolf.VacateSeatResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.werewolf.VacateSeatResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.werewolf.VacateSeatResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.werewolf.VacateSeatResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.werewolf.VacateSeatResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.werewolf.VacateSeatResponse}
 */
proto.werewolf.VacateSeatResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.werewolf.VacateSeatResponse;
  return proto.werewolf.VacateSeatResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.werewolf.VacateSeatResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.werewolf.VacateSeatResponse}
 */
proto.werewolf.VacateSeatResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.werewolf.VacateSeatResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.werewolf.VacateSeatResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.werewolf.VacateSeatResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.werewolf.VacateSeatResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.werewolf.CreateAndJoinRoomRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.werewolf.CreateAndJoinRoomRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.werewolf.CreateAndJoinRoomRequest.displayName = 'proto.werewolf.CreateAndJoinRoomRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.werewolf.CreateAndJoinRoomRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.werewolf.CreateAndJoinRoomRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.werewolf.CreateAndJoinRoomRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.werewolf.CreateAndJoinRoomRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.werewolf.CreateAndJoinRoomRequest}
 */
proto.werewolf.CreateAndJoinRoomRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.werewolf.CreateAndJoinRoomRequest;
  return proto.werewolf.CreateAndJoinRoomRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.werewolf.CreateAndJoinRoomRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.werewolf.CreateAndJoinRoomRequest}
 */
proto.werewolf.CreateAndJoinRoomRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.werewolf.CreateAndJoinRoomRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.werewolf.CreateAndJoinRoomRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.werewolf.CreateAndJoinRoomRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.werewolf.CreateAndJoinRoomRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.werewolf.CreateAndJoinRoomResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.werewolf.CreateAndJoinRoomResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.werewolf.CreateAndJoinRoomResponse.displayName = 'proto.werewolf.CreateAndJoinRoomResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.werewolf.CreateAndJoinRoomResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.werewolf.CreateAndJoinRoomResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.werewolf.CreateAndJoinRoomResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.werewolf.CreateAndJoinRoomResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    roomId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    userId: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.werewolf.CreateAndJoinRoomResponse}
 */
proto.werewolf.CreateAndJoinRoomResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.werewolf.CreateAndJoinRoomResponse;
  return proto.werewolf.CreateAndJoinRoomResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.werewolf.CreateAndJoinRoomResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.werewolf.CreateAndJoinRoomResponse}
 */
proto.werewolf.CreateAndJoinRoomResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRoomId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.werewolf.CreateAndJoinRoomResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.werewolf.CreateAndJoinRoomResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.werewolf.CreateAndJoinRoomResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.werewolf.CreateAndJoinRoomResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRoomId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getUserId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string room_id = 1;
 * @return {string}
 */
proto.werewolf.CreateAndJoinRoomResponse.prototype.getRoomId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.werewolf.CreateAndJoinRoomResponse.prototype.setRoomId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string user_id = 2;
 * @return {string}
 */
proto.werewolf.CreateAndJoinRoomResponse.prototype.getUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.werewolf.CreateAndJoinRoomResponse.prototype.setUserId = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.werewolf.UpdateGameConfigRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.werewolf.UpdateGameConfigRequest.repeatedFields_, null);
};
goog.inherits(proto.werewolf.UpdateGameConfigRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.werewolf.UpdateGameConfigRequest.displayName = 'proto.werewolf.UpdateGameConfigRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.werewolf.UpdateGameConfigRequest.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.werewolf.UpdateGameConfigRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.werewolf.UpdateGameConfigRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.werewolf.UpdateGameConfigRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.werewolf.UpdateGameConfigRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    roomId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    roleCountsList: jspb.Message.toObjectList(msg.getRoleCountsList(),
    proto.werewolf.UpdateGameConfigRequest.RoleCount.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.werewolf.UpdateGameConfigRequest}
 */
proto.werewolf.UpdateGameConfigRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.werewolf.UpdateGameConfigRequest;
  return proto.werewolf.UpdateGameConfigRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.werewolf.UpdateGameConfigRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.werewolf.UpdateGameConfigRequest}
 */
proto.werewolf.UpdateGameConfigRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRoomId(value);
      break;
    case 2:
      var value = new proto.werewolf.UpdateGameConfigRequest.RoleCount;
      reader.readMessage(value,proto.werewolf.UpdateGameConfigRequest.RoleCount.deserializeBinaryFromReader);
      msg.addRoleCounts(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.werewolf.UpdateGameConfigRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.werewolf.UpdateGameConfigRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.werewolf.UpdateGameConfigRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.werewolf.UpdateGameConfigRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRoomId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getRoleCountsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.werewolf.UpdateGameConfigRequest.RoleCount.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.werewolf.UpdateGameConfigRequest.RoleCount = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.werewolf.UpdateGameConfigRequest.RoleCount, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.werewolf.UpdateGameConfigRequest.RoleCount.displayName = 'proto.werewolf.UpdateGameConfigRequest.RoleCount';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.werewolf.UpdateGameConfigRequest.RoleCount.prototype.toObject = function(opt_includeInstance) {
  return proto.werewolf.UpdateGameConfigRequest.RoleCount.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.werewolf.UpdateGameConfigRequest.RoleCount} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.werewolf.UpdateGameConfigRequest.RoleCount.toObject = function(includeInstance, msg) {
  var f, obj = {
    role: jspb.Message.getFieldWithDefault(msg, 1, 0),
    count: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.werewolf.UpdateGameConfigRequest.RoleCount}
 */
proto.werewolf.UpdateGameConfigRequest.RoleCount.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.werewolf.UpdateGameConfigRequest.RoleCount;
  return proto.werewolf.UpdateGameConfigRequest.RoleCount.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.werewolf.UpdateGameConfigRequest.RoleCount} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.werewolf.UpdateGameConfigRequest.RoleCount}
 */
proto.werewolf.UpdateGameConfigRequest.RoleCount.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.werewolf.Role} */ (reader.readEnum());
      msg.setRole(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.werewolf.UpdateGameConfigRequest.RoleCount.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.werewolf.UpdateGameConfigRequest.RoleCount.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.werewolf.UpdateGameConfigRequest.RoleCount} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.werewolf.UpdateGameConfigRequest.RoleCount.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRole();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getCount();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional Role role = 1;
 * @return {!proto.werewolf.Role}
 */
proto.werewolf.UpdateGameConfigRequest.RoleCount.prototype.getRole = function() {
  return /** @type {!proto.werewolf.Role} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.werewolf.Role} value */
proto.werewolf.UpdateGameConfigRequest.RoleCount.prototype.setRole = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional int32 count = 2;
 * @return {number}
 */
proto.werewolf.UpdateGameConfigRequest.RoleCount.prototype.getCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.werewolf.UpdateGameConfigRequest.RoleCount.prototype.setCount = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string room_id = 1;
 * @return {string}
 */
proto.werewolf.UpdateGameConfigRequest.prototype.getRoomId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.werewolf.UpdateGameConfigRequest.prototype.setRoomId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated RoleCount role_counts = 2;
 * @return {!Array<!proto.werewolf.UpdateGameConfigRequest.RoleCount>}
 */
proto.werewolf.UpdateGameConfigRequest.prototype.getRoleCountsList = function() {
  return /** @type{!Array<!proto.werewolf.UpdateGameConfigRequest.RoleCount>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.werewolf.UpdateGameConfigRequest.RoleCount, 2));
};


/** @param {!Array<!proto.werewolf.UpdateGameConfigRequest.RoleCount>} value */
proto.werewolf.UpdateGameConfigRequest.prototype.setRoleCountsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.werewolf.UpdateGameConfigRequest.RoleCount=} opt_value
 * @param {number=} opt_index
 * @return {!proto.werewolf.UpdateGameConfigRequest.RoleCount}
 */
proto.werewolf.UpdateGameConfigRequest.prototype.addRoleCounts = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.werewolf.UpdateGameConfigRequest.RoleCount, opt_index);
};


proto.werewolf.UpdateGameConfigRequest.prototype.clearRoleCountsList = function() {
  this.setRoleCountsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.werewolf.UpdateGameConfigResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.werewolf.UpdateGameConfigResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.werewolf.UpdateGameConfigResponse.displayName = 'proto.werewolf.UpdateGameConfigResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.werewolf.UpdateGameConfigResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.werewolf.UpdateGameConfigResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.werewolf.UpdateGameConfigResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.werewolf.UpdateGameConfigResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.werewolf.UpdateGameConfigResponse}
 */
proto.werewolf.UpdateGameConfigResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.werewolf.UpdateGameConfigResponse;
  return proto.werewolf.UpdateGameConfigResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.werewolf.UpdateGameConfigResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.werewolf.UpdateGameConfigResponse}
 */
proto.werewolf.UpdateGameConfigResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.werewolf.UpdateGameConfigResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.werewolf.UpdateGameConfigResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.werewolf.UpdateGameConfigResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.werewolf.UpdateGameConfigResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.werewolf.JoinRoomRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.werewolf.JoinRoomRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.werewolf.JoinRoomRequest.displayName = 'proto.werewolf.JoinRoomRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.werewolf.JoinRoomRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.werewolf.JoinRoomRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.werewolf.JoinRoomRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.werewolf.JoinRoomRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    userId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    roomId: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.werewolf.JoinRoomRequest}
 */
proto.werewolf.JoinRoomRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.werewolf.JoinRoomRequest;
  return proto.werewolf.JoinRoomRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.werewolf.JoinRoomRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.werewolf.JoinRoomRequest}
 */
proto.werewolf.JoinRoomRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setRoomId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.werewolf.JoinRoomRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.werewolf.JoinRoomRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.werewolf.JoinRoomRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.werewolf.JoinRoomRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getRoomId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string user_id = 1;
 * @return {string}
 */
proto.werewolf.JoinRoomRequest.prototype.getUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.werewolf.JoinRoomRequest.prototype.setUserId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string room_id = 2;
 * @return {string}
 */
proto.werewolf.JoinRoomRequest.prototype.getRoomId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.werewolf.JoinRoomRequest.prototype.setRoomId = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.werewolf.JoinRoomResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.werewolf.JoinRoomResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.werewolf.JoinRoomResponse.displayName = 'proto.werewolf.JoinRoomResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.werewolf.JoinRoomResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.werewolf.JoinRoomResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.werewolf.JoinRoomResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.werewolf.JoinRoomResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    userId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.werewolf.JoinRoomResponse}
 */
proto.werewolf.JoinRoomResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.werewolf.JoinRoomResponse;
  return proto.werewolf.JoinRoomResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.werewolf.JoinRoomResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.werewolf.JoinRoomResponse}
 */
proto.werewolf.JoinRoomResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.werewolf.JoinRoomResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.werewolf.JoinRoomResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.werewolf.JoinRoomResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.werewolf.JoinRoomResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string user_id = 1;
 * @return {string}
 */
proto.werewolf.JoinRoomResponse.prototype.getUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.werewolf.JoinRoomResponse.prototype.setUserId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.werewolf.GetRoomRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.werewolf.GetRoomRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.werewolf.GetRoomRequest.displayName = 'proto.werewolf.GetRoomRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.werewolf.GetRoomRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.werewolf.GetRoomRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.werewolf.GetRoomRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.werewolf.GetRoomRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    roomId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.werewolf.GetRoomRequest}
 */
proto.werewolf.GetRoomRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.werewolf.GetRoomRequest;
  return proto.werewolf.GetRoomRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.werewolf.GetRoomRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.werewolf.GetRoomRequest}
 */
proto.werewolf.GetRoomRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRoomId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.werewolf.GetRoomRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.werewolf.GetRoomRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.werewolf.GetRoomRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.werewolf.GetRoomRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRoomId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string room_id = 1;
 * @return {string}
 */
proto.werewolf.GetRoomRequest.prototype.getRoomId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.werewolf.GetRoomRequest.prototype.setRoomId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.werewolf.GetRoomResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.werewolf.GetRoomResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.werewolf.GetRoomResponse.displayName = 'proto.werewolf.GetRoomResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.werewolf.GetRoomResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.werewolf.GetRoomResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.werewolf.GetRoomResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.werewolf.GetRoomResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    room: (f = msg.getRoom()) && proto.werewolf.Room.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.werewolf.GetRoomResponse}
 */
proto.werewolf.GetRoomResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.werewolf.GetRoomResponse;
  return proto.werewolf.GetRoomResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.werewolf.GetRoomResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.werewolf.GetRoomResponse}
 */
proto.werewolf.GetRoomResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.werewolf.Room;
      reader.readMessage(value,proto.werewolf.Room.deserializeBinaryFromReader);
      msg.setRoom(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.werewolf.GetRoomResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.werewolf.GetRoomResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.werewolf.GetRoomResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.werewolf.GetRoomResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRoom();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.werewolf.Room.serializeBinaryToWriter
    );
  }
};


/**
 * optional Room room = 1;
 * @return {?proto.werewolf.Room}
 */
proto.werewolf.GetRoomResponse.prototype.getRoom = function() {
  return /** @type{?proto.werewolf.Room} */ (
    jspb.Message.getWrapperField(this, proto.werewolf.Room, 1));
};


/** @param {?proto.werewolf.Room|undefined} value */
proto.werewolf.GetRoomResponse.prototype.setRoom = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.werewolf.GetRoomResponse.prototype.clearRoom = function() {
  this.setRoom(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.werewolf.GetRoomResponse.prototype.hasRoom = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.werewolf.TakeSeatRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.werewolf.TakeSeatRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.werewolf.TakeSeatRequest.displayName = 'proto.werewolf.TakeSeatRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.werewolf.TakeSeatRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.werewolf.TakeSeatRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.werewolf.TakeSeatRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.werewolf.TakeSeatRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    seatId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    userId: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.werewolf.TakeSeatRequest}
 */
proto.werewolf.TakeSeatRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.werewolf.TakeSeatRequest;
  return proto.werewolf.TakeSeatRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.werewolf.TakeSeatRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.werewolf.TakeSeatRequest}
 */
proto.werewolf.TakeSeatRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSeatId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.werewolf.TakeSeatRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.werewolf.TakeSeatRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.werewolf.TakeSeatRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.werewolf.TakeSeatRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSeatId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getUserId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string seat_id = 1;
 * @return {string}
 */
proto.werewolf.TakeSeatRequest.prototype.getSeatId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.werewolf.TakeSeatRequest.prototype.setSeatId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string user_id = 2;
 * @return {string}
 */
proto.werewolf.TakeSeatRequest.prototype.getUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.werewolf.TakeSeatRequest.prototype.setUserId = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.werewolf.TakeSeatResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.werewolf.TakeSeatResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.werewolf.TakeSeatResponse.displayName = 'proto.werewolf.TakeSeatResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.werewolf.TakeSeatResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.werewolf.TakeSeatResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.werewolf.TakeSeatResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.werewolf.TakeSeatResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.werewolf.TakeSeatResponse}
 */
proto.werewolf.TakeSeatResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.werewolf.TakeSeatResponse;
  return proto.werewolf.TakeSeatResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.werewolf.TakeSeatResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.werewolf.TakeSeatResponse}
 */
proto.werewolf.TakeSeatResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.werewolf.TakeSeatResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.werewolf.TakeSeatResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.werewolf.TakeSeatResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.werewolf.TakeSeatResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.werewolf.ReassignRolesRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.werewolf.ReassignRolesRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.werewolf.ReassignRolesRequest.displayName = 'proto.werewolf.ReassignRolesRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.werewolf.ReassignRolesRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.werewolf.ReassignRolesRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.werewolf.ReassignRolesRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.werewolf.ReassignRolesRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    roomId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.werewolf.ReassignRolesRequest}
 */
proto.werewolf.ReassignRolesRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.werewolf.ReassignRolesRequest;
  return proto.werewolf.ReassignRolesRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.werewolf.ReassignRolesRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.werewolf.ReassignRolesRequest}
 */
proto.werewolf.ReassignRolesRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRoomId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.werewolf.ReassignRolesRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.werewolf.ReassignRolesRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.werewolf.ReassignRolesRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.werewolf.ReassignRolesRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRoomId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string room_id = 1;
 * @return {string}
 */
proto.werewolf.ReassignRolesRequest.prototype.getRoomId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.werewolf.ReassignRolesRequest.prototype.setRoomId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.werewolf.ReassignRolesResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.werewolf.ReassignRolesResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.werewolf.ReassignRolesResponse.displayName = 'proto.werewolf.ReassignRolesResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.werewolf.ReassignRolesResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.werewolf.ReassignRolesResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.werewolf.ReassignRolesResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.werewolf.ReassignRolesResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.werewolf.ReassignRolesResponse}
 */
proto.werewolf.ReassignRolesResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.werewolf.ReassignRolesResponse;
  return proto.werewolf.ReassignRolesResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.werewolf.ReassignRolesResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.werewolf.ReassignRolesResponse}
 */
proto.werewolf.ReassignRolesResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.werewolf.ReassignRolesResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.werewolf.ReassignRolesResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.werewolf.ReassignRolesResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.werewolf.ReassignRolesResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.werewolf.StartGameRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.werewolf.StartGameRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.werewolf.StartGameRequest.displayName = 'proto.werewolf.StartGameRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.werewolf.StartGameRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.werewolf.StartGameRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.werewolf.StartGameRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.werewolf.StartGameRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    roomId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.werewolf.StartGameRequest}
 */
proto.werewolf.StartGameRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.werewolf.StartGameRequest;
  return proto.werewolf.StartGameRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.werewolf.StartGameRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.werewolf.StartGameRequest}
 */
proto.werewolf.StartGameRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRoomId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.werewolf.StartGameRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.werewolf.StartGameRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.werewolf.StartGameRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.werewolf.StartGameRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRoomId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string room_id = 1;
 * @return {string}
 */
proto.werewolf.StartGameRequest.prototype.getRoomId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.werewolf.StartGameRequest.prototype.setRoomId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.werewolf.StartGameResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.werewolf.StartGameResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.werewolf.StartGameResponse.displayName = 'proto.werewolf.StartGameResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.werewolf.StartGameResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.werewolf.StartGameResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.werewolf.StartGameResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.werewolf.StartGameResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.werewolf.StartGameResponse}
 */
proto.werewolf.StartGameResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.werewolf.StartGameResponse;
  return proto.werewolf.StartGameResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.werewolf.StartGameResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.werewolf.StartGameResponse}
 */
proto.werewolf.StartGameResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.werewolf.StartGameResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.werewolf.StartGameResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.werewolf.StartGameResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.werewolf.StartGameResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.werewolf.TakeActionRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.werewolf.TakeActionRequest.oneofGroups_);
};
goog.inherits(proto.werewolf.TakeActionRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.werewolf.TakeActionRequest.displayName = 'proto.werewolf.TakeActionRequest';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.werewolf.TakeActionRequest.oneofGroups_ = [[2,3,4,5,6,7,8,9]];

/**
 * @enum {number}
 */
proto.werewolf.TakeActionRequest.ActionCase = {
  ACTION_NOT_SET: 0,
  DARKNESS: 2,
  SEER: 3,
  WITCH: 4,
  HUNTER: 5,
  GUARD: 6,
  WEREWOLF: 7,
  HALF_BLOOD: 8,
  SHERIFF: 9
};

/**
 * @return {proto.werewolf.TakeActionRequest.ActionCase}
 */
proto.werewolf.TakeActionRequest.prototype.getActionCase = function() {
  return /** @type {proto.werewolf.TakeActionRequest.ActionCase} */(jspb.Message.computeOneofCase(this, proto.werewolf.TakeActionRequest.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.werewolf.TakeActionRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.werewolf.TakeActionRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.werewolf.TakeActionRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.werewolf.TakeActionRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    gameId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    darkness: (f = msg.getDarkness()) && proto.werewolf.TakeActionRequest.CompleteDarknessAction.toObject(includeInstance, f),
    seer: (f = msg.getSeer()) && proto.werewolf.TakeActionRequest.SeerAction.toObject(includeInstance, f),
    witch: (f = msg.getWitch()) && proto.werewolf.TakeActionRequest.WitchAction.toObject(includeInstance, f),
    hunter: (f = msg.getHunter()) && proto.werewolf.TakeActionRequest.HunterAction.toObject(includeInstance, f),
    guard: (f = msg.getGuard()) && proto.werewolf.TakeActionRequest.GuardAction.toObject(includeInstance, f),
    werewolf: (f = msg.getWerewolf()) && proto.werewolf.TakeActionRequest.WerewolfAction.toObject(includeInstance, f),
    halfBlood: (f = msg.getHalfBlood()) && proto.werewolf.TakeActionRequest.HalfBloodAction.toObject(includeInstance, f),
    sheriff: (f = msg.getSheriff()) && proto.werewolf.TakeActionRequest.CompleteSheriffAction.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.werewolf.TakeActionRequest}
 */
proto.werewolf.TakeActionRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.werewolf.TakeActionRequest;
  return proto.werewolf.TakeActionRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.werewolf.TakeActionRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.werewolf.TakeActionRequest}
 */
proto.werewolf.TakeActionRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setGameId(value);
      break;
    case 2:
      var value = new proto.werewolf.TakeActionRequest.CompleteDarknessAction;
      reader.readMessage(value,proto.werewolf.TakeActionRequest.CompleteDarknessAction.deserializeBinaryFromReader);
      msg.setDarkness(value);
      break;
    case 3:
      var value = new proto.werewolf.TakeActionRequest.SeerAction;
      reader.readMessage(value,proto.werewolf.TakeActionRequest.SeerAction.deserializeBinaryFromReader);
      msg.setSeer(value);
      break;
    case 4:
      var value = new proto.werewolf.TakeActionRequest.WitchAction;
      reader.readMessage(value,proto.werewolf.TakeActionRequest.WitchAction.deserializeBinaryFromReader);
      msg.setWitch(value);
      break;
    case 5:
      var value = new proto.werewolf.TakeActionRequest.HunterAction;
      reader.readMessage(value,proto.werewolf.TakeActionRequest.HunterAction.deserializeBinaryFromReader);
      msg.setHunter(value);
      break;
    case 6:
      var value = new proto.werewolf.TakeActionRequest.GuardAction;
      reader.readMessage(value,proto.werewolf.TakeActionRequest.GuardAction.deserializeBinaryFromReader);
      msg.setGuard(value);
      break;
    case 7:
      var value = new proto.werewolf.TakeActionRequest.WerewolfAction;
      reader.readMessage(value,proto.werewolf.TakeActionRequest.WerewolfAction.deserializeBinaryFromReader);
      msg.setWerewolf(value);
      break;
    case 8:
      var value = new proto.werewolf.TakeActionRequest.HalfBloodAction;
      reader.readMessage(value,proto.werewolf.TakeActionRequest.HalfBloodAction.deserializeBinaryFromReader);
      msg.setHalfBlood(value);
      break;
    case 9:
      var value = new proto.werewolf.TakeActionRequest.CompleteSheriffAction;
      reader.readMessage(value,proto.werewolf.TakeActionRequest.CompleteSheriffAction.deserializeBinaryFromReader);
      msg.setSheriff(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.werewolf.TakeActionRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.werewolf.TakeActionRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.werewolf.TakeActionRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.werewolf.TakeActionRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGameId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDarkness();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.werewolf.TakeActionRequest.CompleteDarknessAction.serializeBinaryToWriter
    );
  }
  f = message.getSeer();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.werewolf.TakeActionRequest.SeerAction.serializeBinaryToWriter
    );
  }
  f = message.getWitch();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.werewolf.TakeActionRequest.WitchAction.serializeBinaryToWriter
    );
  }
  f = message.getHunter();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.werewolf.TakeActionRequest.HunterAction.serializeBinaryToWriter
    );
  }
  f = message.getGuard();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.werewolf.TakeActionRequest.GuardAction.serializeBinaryToWriter
    );
  }
  f = message.getWerewolf();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.werewolf.TakeActionRequest.WerewolfAction.serializeBinaryToWriter
    );
  }
  f = message.getHalfBlood();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.werewolf.TakeActionRequest.HalfBloodAction.serializeBinaryToWriter
    );
  }
  f = message.getSheriff();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.werewolf.TakeActionRequest.CompleteSheriffAction.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.werewolf.TakeActionRequest.CompleteDarknessAction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.werewolf.TakeActionRequest.CompleteDarknessAction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.werewolf.TakeActionRequest.CompleteDarknessAction.displayName = 'proto.werewolf.TakeActionRequest.CompleteDarknessAction';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.werewolf.TakeActionRequest.CompleteDarknessAction.prototype.toObject = function(opt_includeInstance) {
  return proto.werewolf.TakeActionRequest.CompleteDarknessAction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.werewolf.TakeActionRequest.CompleteDarknessAction} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.werewolf.TakeActionRequest.CompleteDarknessAction.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.werewolf.TakeActionRequest.CompleteDarknessAction}
 */
proto.werewolf.TakeActionRequest.CompleteDarknessAction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.werewolf.TakeActionRequest.CompleteDarknessAction;
  return proto.werewolf.TakeActionRequest.CompleteDarknessAction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.werewolf.TakeActionRequest.CompleteDarknessAction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.werewolf.TakeActionRequest.CompleteDarknessAction}
 */
proto.werewolf.TakeActionRequest.CompleteDarknessAction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.werewolf.TakeActionRequest.CompleteDarknessAction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.werewolf.TakeActionRequest.CompleteDarknessAction.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.werewolf.TakeActionRequest.CompleteDarknessAction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.werewolf.TakeActionRequest.CompleteDarknessAction.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.werewolf.TakeActionRequest.SeerAction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.werewolf.TakeActionRequest.SeerAction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.werewolf.TakeActionRequest.SeerAction.displayName = 'proto.werewolf.TakeActionRequest.SeerAction';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.werewolf.TakeActionRequest.SeerAction.prototype.toObject = function(opt_includeInstance) {
  return proto.werewolf.TakeActionRequest.SeerAction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.werewolf.TakeActionRequest.SeerAction} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.werewolf.TakeActionRequest.SeerAction.toObject = function(includeInstance, msg) {
  var f, obj = {
    seatId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.werewolf.TakeActionRequest.SeerAction}
 */
proto.werewolf.TakeActionRequest.SeerAction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.werewolf.TakeActionRequest.SeerAction;
  return proto.werewolf.TakeActionRequest.SeerAction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.werewolf.TakeActionRequest.SeerAction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.werewolf.TakeActionRequest.SeerAction}
 */
proto.werewolf.TakeActionRequest.SeerAction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSeatId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.werewolf.TakeActionRequest.SeerAction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.werewolf.TakeActionRequest.SeerAction.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.werewolf.TakeActionRequest.SeerAction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.werewolf.TakeActionRequest.SeerAction.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSeatId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string seat_id = 1;
 * @return {string}
 */
proto.werewolf.TakeActionRequest.SeerAction.prototype.getSeatId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.werewolf.TakeActionRequest.SeerAction.prototype.setSeatId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.werewolf.TakeActionRequest.WitchAction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.werewolf.TakeActionRequest.WitchAction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.werewolf.TakeActionRequest.WitchAction.displayName = 'proto.werewolf.TakeActionRequest.WitchAction';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.werewolf.TakeActionRequest.WitchAction.prototype.toObject = function(opt_includeInstance) {
  return proto.werewolf.TakeActionRequest.WitchAction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.werewolf.TakeActionRequest.WitchAction} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.werewolf.TakeActionRequest.WitchAction.toObject = function(includeInstance, msg) {
  var f, obj = {
    poisonSeatId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    cureSeatId: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.werewolf.TakeActionRequest.WitchAction}
 */
proto.werewolf.TakeActionRequest.WitchAction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.werewolf.TakeActionRequest.WitchAction;
  return proto.werewolf.TakeActionRequest.WitchAction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.werewolf.TakeActionRequest.WitchAction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.werewolf.TakeActionRequest.WitchAction}
 */
proto.werewolf.TakeActionRequest.WitchAction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPoisonSeatId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCureSeatId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.werewolf.TakeActionRequest.WitchAction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.werewolf.TakeActionRequest.WitchAction.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.werewolf.TakeActionRequest.WitchAction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.werewolf.TakeActionRequest.WitchAction.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPoisonSeatId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCureSeatId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string poison_seat_id = 1;
 * @return {string}
 */
proto.werewolf.TakeActionRequest.WitchAction.prototype.getPoisonSeatId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.werewolf.TakeActionRequest.WitchAction.prototype.setPoisonSeatId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string cure_seat_id = 2;
 * @return {string}
 */
proto.werewolf.TakeActionRequest.WitchAction.prototype.getCureSeatId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.werewolf.TakeActionRequest.WitchAction.prototype.setCureSeatId = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.werewolf.TakeActionRequest.HunterAction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.werewolf.TakeActionRequest.HunterAction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.werewolf.TakeActionRequest.HunterAction.displayName = 'proto.werewolf.TakeActionRequest.HunterAction';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.werewolf.TakeActionRequest.HunterAction.prototype.toObject = function(opt_includeInstance) {
  return proto.werewolf.TakeActionRequest.HunterAction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.werewolf.TakeActionRequest.HunterAction} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.werewolf.TakeActionRequest.HunterAction.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.werewolf.TakeActionRequest.HunterAction}
 */
proto.werewolf.TakeActionRequest.HunterAction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.werewolf.TakeActionRequest.HunterAction;
  return proto.werewolf.TakeActionRequest.HunterAction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.werewolf.TakeActionRequest.HunterAction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.werewolf.TakeActionRequest.HunterAction}
 */
proto.werewolf.TakeActionRequest.HunterAction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.werewolf.TakeActionRequest.HunterAction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.werewolf.TakeActionRequest.HunterAction.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.werewolf.TakeActionRequest.HunterAction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.werewolf.TakeActionRequest.HunterAction.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.werewolf.TakeActionRequest.GuardAction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.werewolf.TakeActionRequest.GuardAction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.werewolf.TakeActionRequest.GuardAction.displayName = 'proto.werewolf.TakeActionRequest.GuardAction';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.werewolf.TakeActionRequest.GuardAction.prototype.toObject = function(opt_includeInstance) {
  return proto.werewolf.TakeActionRequest.GuardAction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.werewolf.TakeActionRequest.GuardAction} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.werewolf.TakeActionRequest.GuardAction.toObject = function(includeInstance, msg) {
  var f, obj = {
    seatId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.werewolf.TakeActionRequest.GuardAction}
 */
proto.werewolf.TakeActionRequest.GuardAction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.werewolf.TakeActionRequest.GuardAction;
  return proto.werewolf.TakeActionRequest.GuardAction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.werewolf.TakeActionRequest.GuardAction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.werewolf.TakeActionRequest.GuardAction}
 */
proto.werewolf.TakeActionRequest.GuardAction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSeatId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.werewolf.TakeActionRequest.GuardAction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.werewolf.TakeActionRequest.GuardAction.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.werewolf.TakeActionRequest.GuardAction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.werewolf.TakeActionRequest.GuardAction.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSeatId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string seat_id = 1;
 * @return {string}
 */
proto.werewolf.TakeActionRequest.GuardAction.prototype.getSeatId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.werewolf.TakeActionRequest.GuardAction.prototype.setSeatId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.werewolf.TakeActionRequest.WerewolfAction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.werewolf.TakeActionRequest.WerewolfAction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.werewolf.TakeActionRequest.WerewolfAction.displayName = 'proto.werewolf.TakeActionRequest.WerewolfAction';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.werewolf.TakeActionRequest.WerewolfAction.prototype.toObject = function(opt_includeInstance) {
  return proto.werewolf.TakeActionRequest.WerewolfAction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.werewolf.TakeActionRequest.WerewolfAction} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.werewolf.TakeActionRequest.WerewolfAction.toObject = function(includeInstance, msg) {
  var f, obj = {
    seatId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.werewolf.TakeActionRequest.WerewolfAction}
 */
proto.werewolf.TakeActionRequest.WerewolfAction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.werewolf.TakeActionRequest.WerewolfAction;
  return proto.werewolf.TakeActionRequest.WerewolfAction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.werewolf.TakeActionRequest.WerewolfAction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.werewolf.TakeActionRequest.WerewolfAction}
 */
proto.werewolf.TakeActionRequest.WerewolfAction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSeatId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.werewolf.TakeActionRequest.WerewolfAction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.werewolf.TakeActionRequest.WerewolfAction.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.werewolf.TakeActionRequest.WerewolfAction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.werewolf.TakeActionRequest.WerewolfAction.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSeatId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string seat_id = 1;
 * @return {string}
 */
proto.werewolf.TakeActionRequest.WerewolfAction.prototype.getSeatId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.werewolf.TakeActionRequest.WerewolfAction.prototype.setSeatId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.werewolf.TakeActionRequest.HalfBloodAction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.werewolf.TakeActionRequest.HalfBloodAction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.werewolf.TakeActionRequest.HalfBloodAction.displayName = 'proto.werewolf.TakeActionRequest.HalfBloodAction';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.werewolf.TakeActionRequest.HalfBloodAction.prototype.toObject = function(opt_includeInstance) {
  return proto.werewolf.TakeActionRequest.HalfBloodAction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.werewolf.TakeActionRequest.HalfBloodAction} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.werewolf.TakeActionRequest.HalfBloodAction.toObject = function(includeInstance, msg) {
  var f, obj = {
    seatId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.werewolf.TakeActionRequest.HalfBloodAction}
 */
proto.werewolf.TakeActionRequest.HalfBloodAction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.werewolf.TakeActionRequest.HalfBloodAction;
  return proto.werewolf.TakeActionRequest.HalfBloodAction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.werewolf.TakeActionRequest.HalfBloodAction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.werewolf.TakeActionRequest.HalfBloodAction}
 */
proto.werewolf.TakeActionRequest.HalfBloodAction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSeatId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.werewolf.TakeActionRequest.HalfBloodAction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.werewolf.TakeActionRequest.HalfBloodAction.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.werewolf.TakeActionRequest.HalfBloodAction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.werewolf.TakeActionRequest.HalfBloodAction.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSeatId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string seat_id = 1;
 * @return {string}
 */
proto.werewolf.TakeActionRequest.HalfBloodAction.prototype.getSeatId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.werewolf.TakeActionRequest.HalfBloodAction.prototype.setSeatId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.werewolf.TakeActionRequest.CompleteSheriffAction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.werewolf.TakeActionRequest.CompleteSheriffAction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.werewolf.TakeActionRequest.CompleteSheriffAction.displayName = 'proto.werewolf.TakeActionRequest.CompleteSheriffAction';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.werewolf.TakeActionRequest.CompleteSheriffAction.prototype.toObject = function(opt_includeInstance) {
  return proto.werewolf.TakeActionRequest.CompleteSheriffAction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.werewolf.TakeActionRequest.CompleteSheriffAction} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.werewolf.TakeActionRequest.CompleteSheriffAction.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.werewolf.TakeActionRequest.CompleteSheriffAction}
 */
proto.werewolf.TakeActionRequest.CompleteSheriffAction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.werewolf.TakeActionRequest.CompleteSheriffAction;
  return proto.werewolf.TakeActionRequest.CompleteSheriffAction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.werewolf.TakeActionRequest.CompleteSheriffAction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.werewolf.TakeActionRequest.CompleteSheriffAction}
 */
proto.werewolf.TakeActionRequest.CompleteSheriffAction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.werewolf.TakeActionRequest.CompleteSheriffAction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.werewolf.TakeActionRequest.CompleteSheriffAction.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.werewolf.TakeActionRequest.CompleteSheriffAction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.werewolf.TakeActionRequest.CompleteSheriffAction.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


/**
 * optional string game_id = 1;
 * @return {string}
 */
proto.werewolf.TakeActionRequest.prototype.getGameId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.werewolf.TakeActionRequest.prototype.setGameId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional CompleteDarknessAction darkness = 2;
 * @return {?proto.werewolf.TakeActionRequest.CompleteDarknessAction}
 */
proto.werewolf.TakeActionRequest.prototype.getDarkness = function() {
  return /** @type{?proto.werewolf.TakeActionRequest.CompleteDarknessAction} */ (
    jspb.Message.getWrapperField(this, proto.werewolf.TakeActionRequest.CompleteDarknessAction, 2));
};


/** @param {?proto.werewolf.TakeActionRequest.CompleteDarknessAction|undefined} value */
proto.werewolf.TakeActionRequest.prototype.setDarkness = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.werewolf.TakeActionRequest.oneofGroups_[0], value);
};


proto.werewolf.TakeActionRequest.prototype.clearDarkness = function() {
  this.setDarkness(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.werewolf.TakeActionRequest.prototype.hasDarkness = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional SeerAction seer = 3;
 * @return {?proto.werewolf.TakeActionRequest.SeerAction}
 */
proto.werewolf.TakeActionRequest.prototype.getSeer = function() {
  return /** @type{?proto.werewolf.TakeActionRequest.SeerAction} */ (
    jspb.Message.getWrapperField(this, proto.werewolf.TakeActionRequest.SeerAction, 3));
};


/** @param {?proto.werewolf.TakeActionRequest.SeerAction|undefined} value */
proto.werewolf.TakeActionRequest.prototype.setSeer = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.werewolf.TakeActionRequest.oneofGroups_[0], value);
};


proto.werewolf.TakeActionRequest.prototype.clearSeer = function() {
  this.setSeer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.werewolf.TakeActionRequest.prototype.hasSeer = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional WitchAction witch = 4;
 * @return {?proto.werewolf.TakeActionRequest.WitchAction}
 */
proto.werewolf.TakeActionRequest.prototype.getWitch = function() {
  return /** @type{?proto.werewolf.TakeActionRequest.WitchAction} */ (
    jspb.Message.getWrapperField(this, proto.werewolf.TakeActionRequest.WitchAction, 4));
};


/** @param {?proto.werewolf.TakeActionRequest.WitchAction|undefined} value */
proto.werewolf.TakeActionRequest.prototype.setWitch = function(value) {
  jspb.Message.setOneofWrapperField(this, 4, proto.werewolf.TakeActionRequest.oneofGroups_[0], value);
};


proto.werewolf.TakeActionRequest.prototype.clearWitch = function() {
  this.setWitch(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.werewolf.TakeActionRequest.prototype.hasWitch = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional HunterAction hunter = 5;
 * @return {?proto.werewolf.TakeActionRequest.HunterAction}
 */
proto.werewolf.TakeActionRequest.prototype.getHunter = function() {
  return /** @type{?proto.werewolf.TakeActionRequest.HunterAction} */ (
    jspb.Message.getWrapperField(this, proto.werewolf.TakeActionRequest.HunterAction, 5));
};


/** @param {?proto.werewolf.TakeActionRequest.HunterAction|undefined} value */
proto.werewolf.TakeActionRequest.prototype.setHunter = function(value) {
  jspb.Message.setOneofWrapperField(this, 5, proto.werewolf.TakeActionRequest.oneofGroups_[0], value);
};


proto.werewolf.TakeActionRequest.prototype.clearHunter = function() {
  this.setHunter(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.werewolf.TakeActionRequest.prototype.hasHunter = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional GuardAction guard = 6;
 * @return {?proto.werewolf.TakeActionRequest.GuardAction}
 */
proto.werewolf.TakeActionRequest.prototype.getGuard = function() {
  return /** @type{?proto.werewolf.TakeActionRequest.GuardAction} */ (
    jspb.Message.getWrapperField(this, proto.werewolf.TakeActionRequest.GuardAction, 6));
};


/** @param {?proto.werewolf.TakeActionRequest.GuardAction|undefined} value */
proto.werewolf.TakeActionRequest.prototype.setGuard = function(value) {
  jspb.Message.setOneofWrapperField(this, 6, proto.werewolf.TakeActionRequest.oneofGroups_[0], value);
};


proto.werewolf.TakeActionRequest.prototype.clearGuard = function() {
  this.setGuard(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.werewolf.TakeActionRequest.prototype.hasGuard = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional WerewolfAction werewolf = 7;
 * @return {?proto.werewolf.TakeActionRequest.WerewolfAction}
 */
proto.werewolf.TakeActionRequest.prototype.getWerewolf = function() {
  return /** @type{?proto.werewolf.TakeActionRequest.WerewolfAction} */ (
    jspb.Message.getWrapperField(this, proto.werewolf.TakeActionRequest.WerewolfAction, 7));
};


/** @param {?proto.werewolf.TakeActionRequest.WerewolfAction|undefined} value */
proto.werewolf.TakeActionRequest.prototype.setWerewolf = function(value) {
  jspb.Message.setOneofWrapperField(this, 7, proto.werewolf.TakeActionRequest.oneofGroups_[0], value);
};


proto.werewolf.TakeActionRequest.prototype.clearWerewolf = function() {
  this.setWerewolf(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.werewolf.TakeActionRequest.prototype.hasWerewolf = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional HalfBloodAction half_blood = 8;
 * @return {?proto.werewolf.TakeActionRequest.HalfBloodAction}
 */
proto.werewolf.TakeActionRequest.prototype.getHalfBlood = function() {
  return /** @type{?proto.werewolf.TakeActionRequest.HalfBloodAction} */ (
    jspb.Message.getWrapperField(this, proto.werewolf.TakeActionRequest.HalfBloodAction, 8));
};


/** @param {?proto.werewolf.TakeActionRequest.HalfBloodAction|undefined} value */
proto.werewolf.TakeActionRequest.prototype.setHalfBlood = function(value) {
  jspb.Message.setOneofWrapperField(this, 8, proto.werewolf.TakeActionRequest.oneofGroups_[0], value);
};


proto.werewolf.TakeActionRequest.prototype.clearHalfBlood = function() {
  this.setHalfBlood(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.werewolf.TakeActionRequest.prototype.hasHalfBlood = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional CompleteSheriffAction sheriff = 9;
 * @return {?proto.werewolf.TakeActionRequest.CompleteSheriffAction}
 */
proto.werewolf.TakeActionRequest.prototype.getSheriff = function() {
  return /** @type{?proto.werewolf.TakeActionRequest.CompleteSheriffAction} */ (
    jspb.Message.getWrapperField(this, proto.werewolf.TakeActionRequest.CompleteSheriffAction, 9));
};


/** @param {?proto.werewolf.TakeActionRequest.CompleteSheriffAction|undefined} value */
proto.werewolf.TakeActionRequest.prototype.setSheriff = function(value) {
  jspb.Message.setOneofWrapperField(this, 9, proto.werewolf.TakeActionRequest.oneofGroups_[0], value);
};


proto.werewolf.TakeActionRequest.prototype.clearSheriff = function() {
  this.setSheriff(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.werewolf.TakeActionRequest.prototype.hasSheriff = function() {
  return jspb.Message.getField(this, 9) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.werewolf.TakeActionResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.werewolf.TakeActionResponse.oneofGroups_);
};
goog.inherits(proto.werewolf.TakeActionResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.werewolf.TakeActionResponse.displayName = 'proto.werewolf.TakeActionResponse';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.werewolf.TakeActionResponse.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.werewolf.TakeActionResponse.ResultCase = {
  RESULT_NOT_SET: 0,
  SEER: 1,
  HUNTER: 2
};

/**
 * @return {proto.werewolf.TakeActionResponse.ResultCase}
 */
proto.werewolf.TakeActionResponse.prototype.getResultCase = function() {
  return /** @type {proto.werewolf.TakeActionResponse.ResultCase} */(jspb.Message.computeOneofCase(this, proto.werewolf.TakeActionResponse.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.werewolf.TakeActionResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.werewolf.TakeActionResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.werewolf.TakeActionResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.werewolf.TakeActionResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    seer: (f = msg.getSeer()) && proto.werewolf.TakeActionResponse.SeerResult.toObject(includeInstance, f),
    hunter: (f = msg.getHunter()) && proto.werewolf.TakeActionResponse.HunterResult.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.werewolf.TakeActionResponse}
 */
proto.werewolf.TakeActionResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.werewolf.TakeActionResponse;
  return proto.werewolf.TakeActionResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.werewolf.TakeActionResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.werewolf.TakeActionResponse}
 */
proto.werewolf.TakeActionResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.werewolf.TakeActionResponse.SeerResult;
      reader.readMessage(value,proto.werewolf.TakeActionResponse.SeerResult.deserializeBinaryFromReader);
      msg.setSeer(value);
      break;
    case 2:
      var value = new proto.werewolf.TakeActionResponse.HunterResult;
      reader.readMessage(value,proto.werewolf.TakeActionResponse.HunterResult.deserializeBinaryFromReader);
      msg.setHunter(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.werewolf.TakeActionResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.werewolf.TakeActionResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.werewolf.TakeActionResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.werewolf.TakeActionResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSeer();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.werewolf.TakeActionResponse.SeerResult.serializeBinaryToWriter
    );
  }
  f = message.getHunter();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.werewolf.TakeActionResponse.HunterResult.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.werewolf.TakeActionResponse.SeerResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.werewolf.TakeActionResponse.SeerResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.werewolf.TakeActionResponse.SeerResult.displayName = 'proto.werewolf.TakeActionResponse.SeerResult';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.werewolf.TakeActionResponse.SeerResult.prototype.toObject = function(opt_includeInstance) {
  return proto.werewolf.TakeActionResponse.SeerResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.werewolf.TakeActionResponse.SeerResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.werewolf.TakeActionResponse.SeerResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    ruling: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.werewolf.TakeActionResponse.SeerResult}
 */
proto.werewolf.TakeActionResponse.SeerResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.werewolf.TakeActionResponse.SeerResult;
  return proto.werewolf.TakeActionResponse.SeerResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.werewolf.TakeActionResponse.SeerResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.werewolf.TakeActionResponse.SeerResult}
 */
proto.werewolf.TakeActionResponse.SeerResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.werewolf.Ruling} */ (reader.readEnum());
      msg.setRuling(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.werewolf.TakeActionResponse.SeerResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.werewolf.TakeActionResponse.SeerResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.werewolf.TakeActionResponse.SeerResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.werewolf.TakeActionResponse.SeerResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRuling();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * optional Ruling ruling = 1;
 * @return {!proto.werewolf.Ruling}
 */
proto.werewolf.TakeActionResponse.SeerResult.prototype.getRuling = function() {
  return /** @type {!proto.werewolf.Ruling} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.werewolf.Ruling} value */
proto.werewolf.TakeActionResponse.SeerResult.prototype.setRuling = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.werewolf.TakeActionResponse.HunterResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.werewolf.TakeActionResponse.HunterResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.werewolf.TakeActionResponse.HunterResult.displayName = 'proto.werewolf.TakeActionResponse.HunterResult';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.werewolf.TakeActionResponse.HunterResult.prototype.toObject = function(opt_includeInstance) {
  return proto.werewolf.TakeActionResponse.HunterResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.werewolf.TakeActionResponse.HunterResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.werewolf.TakeActionResponse.HunterResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    ruling: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.werewolf.TakeActionResponse.HunterResult}
 */
proto.werewolf.TakeActionResponse.HunterResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.werewolf.TakeActionResponse.HunterResult;
  return proto.werewolf.TakeActionResponse.HunterResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.werewolf.TakeActionResponse.HunterResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.werewolf.TakeActionResponse.HunterResult}
 */
proto.werewolf.TakeActionResponse.HunterResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.werewolf.Ruling} */ (reader.readEnum());
      msg.setRuling(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.werewolf.TakeActionResponse.HunterResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.werewolf.TakeActionResponse.HunterResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.werewolf.TakeActionResponse.HunterResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.werewolf.TakeActionResponse.HunterResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRuling();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * optional Ruling ruling = 1;
 * @return {!proto.werewolf.Ruling}
 */
proto.werewolf.TakeActionResponse.HunterResult.prototype.getRuling = function() {
  return /** @type {!proto.werewolf.Ruling} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.werewolf.Ruling} value */
proto.werewolf.TakeActionResponse.HunterResult.prototype.setRuling = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional SeerResult seer = 1;
 * @return {?proto.werewolf.TakeActionResponse.SeerResult}
 */
proto.werewolf.TakeActionResponse.prototype.getSeer = function() {
  return /** @type{?proto.werewolf.TakeActionResponse.SeerResult} */ (
    jspb.Message.getWrapperField(this, proto.werewolf.TakeActionResponse.SeerResult, 1));
};


/** @param {?proto.werewolf.TakeActionResponse.SeerResult|undefined} value */
proto.werewolf.TakeActionResponse.prototype.setSeer = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.werewolf.TakeActionResponse.oneofGroups_[0], value);
};


proto.werewolf.TakeActionResponse.prototype.clearSeer = function() {
  this.setSeer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.werewolf.TakeActionResponse.prototype.hasSeer = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional HunterResult hunter = 2;
 * @return {?proto.werewolf.TakeActionResponse.HunterResult}
 */
proto.werewolf.TakeActionResponse.prototype.getHunter = function() {
  return /** @type{?proto.werewolf.TakeActionResponse.HunterResult} */ (
    jspb.Message.getWrapperField(this, proto.werewolf.TakeActionResponse.HunterResult, 2));
};


/** @param {?proto.werewolf.TakeActionResponse.HunterResult|undefined} value */
proto.werewolf.TakeActionResponse.prototype.setHunter = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.werewolf.TakeActionResponse.oneofGroups_[0], value);
};


proto.werewolf.TakeActionResponse.prototype.clearHunter = function() {
  this.setHunter(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.werewolf.TakeActionResponse.prototype.hasHunter = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.werewolf.Room = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.werewolf.Room.repeatedFields_, null);
};
goog.inherits(proto.werewolf.Room, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.werewolf.Room.displayName = 'proto.werewolf.Room';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.werewolf.Room.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.werewolf.Room.prototype.toObject = function(opt_includeInstance) {
  return proto.werewolf.Room.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.werewolf.Room} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.werewolf.Room.toObject = function(includeInstance, msg) {
  var f, obj = {
    seatsList: jspb.Message.toObjectList(msg.getSeatsList(),
    proto.werewolf.Seat.toObject, includeInstance),
    game: (f = msg.getGame()) && proto.werewolf.Game.toObject(includeInstance, f),
    hostId: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.werewolf.Room}
 */
proto.werewolf.Room.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.werewolf.Room;
  return proto.werewolf.Room.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.werewolf.Room} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.werewolf.Room}
 */
proto.werewolf.Room.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.werewolf.Seat;
      reader.readMessage(value,proto.werewolf.Seat.deserializeBinaryFromReader);
      msg.addSeats(value);
      break;
    case 2:
      var value = new proto.werewolf.Game;
      reader.readMessage(value,proto.werewolf.Game.deserializeBinaryFromReader);
      msg.setGame(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setHostId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.werewolf.Room.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.werewolf.Room.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.werewolf.Room} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.werewolf.Room.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSeatsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.werewolf.Seat.serializeBinaryToWriter
    );
  }
  f = message.getGame();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.werewolf.Game.serializeBinaryToWriter
    );
  }
  f = message.getHostId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * repeated Seat seats = 1;
 * @return {!Array<!proto.werewolf.Seat>}
 */
proto.werewolf.Room.prototype.getSeatsList = function() {
  return /** @type{!Array<!proto.werewolf.Seat>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.werewolf.Seat, 1));
};


/** @param {!Array<!proto.werewolf.Seat>} value */
proto.werewolf.Room.prototype.setSeatsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.werewolf.Seat=} opt_value
 * @param {number=} opt_index
 * @return {!proto.werewolf.Seat}
 */
proto.werewolf.Room.prototype.addSeats = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.werewolf.Seat, opt_index);
};


proto.werewolf.Room.prototype.clearSeatsList = function() {
  this.setSeatsList([]);
};


/**
 * optional Game game = 2;
 * @return {?proto.werewolf.Game}
 */
proto.werewolf.Room.prototype.getGame = function() {
  return /** @type{?proto.werewolf.Game} */ (
    jspb.Message.getWrapperField(this, proto.werewolf.Game, 2));
};


/** @param {?proto.werewolf.Game|undefined} value */
proto.werewolf.Room.prototype.setGame = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.werewolf.Room.prototype.clearGame = function() {
  this.setGame(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.werewolf.Room.prototype.hasGame = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string host_id = 3;
 * @return {string}
 */
proto.werewolf.Room.prototype.getHostId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.werewolf.Room.prototype.setHostId = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.werewolf.Seat = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.werewolf.Seat, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.werewolf.Seat.displayName = 'proto.werewolf.Seat';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.werewolf.Seat.prototype.toObject = function(opt_includeInstance) {
  return proto.werewolf.Seat.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.werewolf.Seat} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.werewolf.Seat.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    user: (f = msg.getUser()) && proto.werewolf.User.toObject(includeInstance, f),
    role: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.werewolf.Seat}
 */
proto.werewolf.Seat.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.werewolf.Seat;
  return proto.werewolf.Seat.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.werewolf.Seat} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.werewolf.Seat}
 */
proto.werewolf.Seat.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = new proto.werewolf.User;
      reader.readMessage(value,proto.werewolf.User.deserializeBinaryFromReader);
      msg.setUser(value);
      break;
    case 3:
      var value = /** @type {!proto.werewolf.Role} */ (reader.readEnum());
      msg.setRole(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.werewolf.Seat.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.werewolf.Seat.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.werewolf.Seat} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.werewolf.Seat.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getUser();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.werewolf.User.serializeBinaryToWriter
    );
  }
  f = message.getRole();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.werewolf.Seat.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.werewolf.Seat.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional User user = 2;
 * @return {?proto.werewolf.User}
 */
proto.werewolf.Seat.prototype.getUser = function() {
  return /** @type{?proto.werewolf.User} */ (
    jspb.Message.getWrapperField(this, proto.werewolf.User, 2));
};


/** @param {?proto.werewolf.User|undefined} value */
proto.werewolf.Seat.prototype.setUser = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.werewolf.Seat.prototype.clearUser = function() {
  this.setUser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.werewolf.Seat.prototype.hasUser = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Role role = 3;
 * @return {!proto.werewolf.Role}
 */
proto.werewolf.Seat.prototype.getRole = function() {
  return /** @type {!proto.werewolf.Role} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.werewolf.Role} value */
proto.werewolf.Seat.prototype.setRole = function(value) {
  jspb.Message.setProto3EnumField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.werewolf.User = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.werewolf.User, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.werewolf.User.displayName = 'proto.werewolf.User';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.werewolf.User.prototype.toObject = function(opt_includeInstance) {
  return proto.werewolf.User.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.werewolf.User} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.werewolf.User.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    imgUrl: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.werewolf.User}
 */
proto.werewolf.User.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.werewolf.User;
  return proto.werewolf.User.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.werewolf.User} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.werewolf.User}
 */
proto.werewolf.User.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setImgUrl(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.werewolf.User.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.werewolf.User.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.werewolf.User} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.werewolf.User.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getImgUrl();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.werewolf.User.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.werewolf.User.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string img_url = 3;
 * @return {string}
 */
proto.werewolf.User.prototype.getImgUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.werewolf.User.prototype.setImgUrl = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.werewolf.Game = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.werewolf.Game.repeatedFields_, null);
};
goog.inherits(proto.werewolf.Game, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.werewolf.Game.displayName = 'proto.werewolf.Game';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.werewolf.Game.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.werewolf.Game.prototype.toObject = function(opt_includeInstance) {
  return proto.werewolf.Game.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.werewolf.Game} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.werewolf.Game.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    state: jspb.Message.getFieldWithDefault(msg, 2, 0),
    killedSeatIdsList: jspb.Message.getRepeatedField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.werewolf.Game}
 */
proto.werewolf.Game.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.werewolf.Game;
  return proto.werewolf.Game.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.werewolf.Game} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.werewolf.Game}
 */
proto.werewolf.Game.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {!proto.werewolf.Game.State} */ (reader.readEnum());
      msg.setState(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addKilledSeatIds(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.werewolf.Game.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.werewolf.Game.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.werewolf.Game} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.werewolf.Game.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getState();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getKilledSeatIdsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.werewolf.Game.State = {
  UNKNOWN: 0,
  ORPHAN_AWAKE: 1,
  HALF_BLOOD_AWAKE: 2,
  GUARDIAN_AWAKE: 3,
  WEREWOLF_AWAKE: 4,
  WITCH_AWAKE: 5,
  SEER_AWAKE: 6,
  HUNTER_AWAKE: 7,
  SHERIFF_ELECTION: 8
};

/**
 * optional string id = 1;
 * @return {string}
 */
proto.werewolf.Game.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.werewolf.Game.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional State state = 2;
 * @return {!proto.werewolf.Game.State}
 */
proto.werewolf.Game.prototype.getState = function() {
  return /** @type {!proto.werewolf.Game.State} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.werewolf.Game.State} value */
proto.werewolf.Game.prototype.setState = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * repeated string killed_seat_ids = 3;
 * @return {!Array<string>}
 */
proto.werewolf.Game.prototype.getKilledSeatIdsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/** @param {!Array<string>} value */
proto.werewolf.Game.prototype.setKilledSeatIdsList = function(value) {
  jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.werewolf.Game.prototype.addKilledSeatIds = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


proto.werewolf.Game.prototype.clearKilledSeatIdsList = function() {
  this.setKilledSeatIdsList([]);
};


/**
 * @enum {number}
 */
proto.werewolf.Role = {
  UNKNOWN: 0,
  VILLAGER: 1,
  SEER: 2,
  WITCH: 3,
  HUNTER: 4,
  IDIOT: 5,
  GUARDIAN: 6,
  WEREWOLF: 7,
  WHITE_WEREWOLF: 8,
  ORPHAN: 9,
  HALF_BLOOD: 10
};

/**
 * @enum {number}
 */
proto.werewolf.Ruling = {
  UNKNOWN_RULING: 0,
  POSITIVE: 1,
  NEGATIVE: 2
};

goog.object.extend(exports, proto.werewolf);
