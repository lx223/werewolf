// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: werewolf.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

enum Werewolf_Role: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case unknown // = 0
  case villager // = 1
  case seer // = 2
  case witch // = 3
  case hunter // = 4
  case idiot // = 5
  case guardian // = 6
  case werewolf // = 7
  case whiteWerewolf // = 8
  case orphan // = 9
  case halfBlood // = 10
  case UNRECOGNIZED(Int)

  init() {
    self = .unknown
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknown
    case 1: self = .villager
    case 2: self = .seer
    case 3: self = .witch
    case 4: self = .hunter
    case 5: self = .idiot
    case 6: self = .guardian
    case 7: self = .werewolf
    case 8: self = .whiteWerewolf
    case 9: self = .orphan
    case 10: self = .halfBlood
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .unknown: return 0
    case .villager: return 1
    case .seer: return 2
    case .witch: return 3
    case .hunter: return 4
    case .idiot: return 5
    case .guardian: return 6
    case .werewolf: return 7
    case .whiteWerewolf: return 8
    case .orphan: return 9
    case .halfBlood: return 10
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Werewolf_Role: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Werewolf_Role] = [
    .unknown,
    .villager,
    .seer,
    .witch,
    .hunter,
    .idiot,
    .guardian,
    .werewolf,
    .whiteWerewolf,
    .orphan,
    .halfBlood,
  ]
}

#endif  // swift(>=4.2)

enum Werewolf_Ruling: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case unknownRuling // = 0
  case positive // = 1
  case negative // = 2
  case UNRECOGNIZED(Int)

  init() {
    self = .unknownRuling
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknownRuling
    case 1: self = .positive
    case 2: self = .negative
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .unknownRuling: return 0
    case .positive: return 1
    case .negative: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Werewolf_Ruling: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Werewolf_Ruling] = [
    .unknownRuling,
    .positive,
    .negative,
  ]
}

#endif  // swift(>=4.2)

struct Werewolf_VacateSeatRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var seatID: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Werewolf_VacateSeatResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Werewolf_CreateAndJoinRoomRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Werewolf_CreateAndJoinRoomResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var roomID: String = String()

  var userID: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Werewolf_UpdateGameConfigRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var roomID: String = String()

  var roleCounts: [Werewolf_UpdateGameConfigRequest.RoleCount] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct RoleCount {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var role: Werewolf_Role = .unknown

    var count: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  init() {}
}

struct Werewolf_UpdateGameConfigResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Werewolf_JoinRoomRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var userID: String = String()

  var roomID: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Werewolf_JoinRoomResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var userID: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Werewolf_GetRoomRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var roomID: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Werewolf_GetRoomResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var room: Werewolf_Room {
    get {return _storage._room ?? Werewolf_Room()}
    set {_uniqueStorage()._room = newValue}
  }
  /// Returns true if `room` has been explicitly set.
  var hasRoom: Bool {return _storage._room != nil}
  /// Clears the value of `room`. Subsequent reads from it will return its default value.
  mutating func clearRoom() {_uniqueStorage()._room = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Werewolf_TakeSeatRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var seatID: String = String()

  var userID: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Werewolf_TakeSeatResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Werewolf_ReassignRolesRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var roomID: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Werewolf_ReassignRolesResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Werewolf_StartGameRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var roomID: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Werewolf_StartGameResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Werewolf_TakeActionRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var gameID: String {
    get {return _storage._gameID}
    set {_uniqueStorage()._gameID = newValue}
  }

  var action: OneOf_Action? {
    get {return _storage._action}
    set {_uniqueStorage()._action = newValue}
  }

  var darkness: Werewolf_TakeActionRequest.CompleteDarknessAction {
    get {
      if case .darkness(let v)? = _storage._action {return v}
      return Werewolf_TakeActionRequest.CompleteDarknessAction()
    }
    set {_uniqueStorage()._action = .darkness(newValue)}
  }

  var seer: Werewolf_TakeActionRequest.SeerAction {
    get {
      if case .seer(let v)? = _storage._action {return v}
      return Werewolf_TakeActionRequest.SeerAction()
    }
    set {_uniqueStorage()._action = .seer(newValue)}
  }

  var witch: Werewolf_TakeActionRequest.WitchAction {
    get {
      if case .witch(let v)? = _storage._action {return v}
      return Werewolf_TakeActionRequest.WitchAction()
    }
    set {_uniqueStorage()._action = .witch(newValue)}
  }

  var hunter: Werewolf_TakeActionRequest.HunterAction {
    get {
      if case .hunter(let v)? = _storage._action {return v}
      return Werewolf_TakeActionRequest.HunterAction()
    }
    set {_uniqueStorage()._action = .hunter(newValue)}
  }

  var `guard`: Werewolf_TakeActionRequest.GuardAction {
    get {
      if case .guard(let v)? = _storage._action {return v}
      return Werewolf_TakeActionRequest.GuardAction()
    }
    set {_uniqueStorage()._action = .guard(newValue)}
  }

  var werewolf: Werewolf_TakeActionRequest.WerewolfAction {
    get {
      if case .werewolf(let v)? = _storage._action {return v}
      return Werewolf_TakeActionRequest.WerewolfAction()
    }
    set {_uniqueStorage()._action = .werewolf(newValue)}
  }

  var halfBlood: Werewolf_TakeActionRequest.HalfBloodAction {
    get {
      if case .halfBlood(let v)? = _storage._action {return v}
      return Werewolf_TakeActionRequest.HalfBloodAction()
    }
    set {_uniqueStorage()._action = .halfBlood(newValue)}
  }

  var sheriff: Werewolf_TakeActionRequest.CompleteSheriffAction {
    get {
      if case .sheriff(let v)? = _storage._action {return v}
      return Werewolf_TakeActionRequest.CompleteSheriffAction()
    }
    set {_uniqueStorage()._action = .sheriff(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Action: Equatable {
    case darkness(Werewolf_TakeActionRequest.CompleteDarknessAction)
    case seer(Werewolf_TakeActionRequest.SeerAction)
    case witch(Werewolf_TakeActionRequest.WitchAction)
    case hunter(Werewolf_TakeActionRequest.HunterAction)
    case `guard`(Werewolf_TakeActionRequest.GuardAction)
    case werewolf(Werewolf_TakeActionRequest.WerewolfAction)
    case halfBlood(Werewolf_TakeActionRequest.HalfBloodAction)
    case sheriff(Werewolf_TakeActionRequest.CompleteSheriffAction)

  #if !swift(>=4.1)
    static func ==(lhs: Werewolf_TakeActionRequest.OneOf_Action, rhs: Werewolf_TakeActionRequest.OneOf_Action) -> Bool {
      switch (lhs, rhs) {
      case (.darkness(let l), .darkness(let r)): return l == r
      case (.seer(let l), .seer(let r)): return l == r
      case (.witch(let l), .witch(let r)): return l == r
      case (.hunter(let l), .hunter(let r)): return l == r
      case (.guard(let l), .guard(let r)): return l == r
      case (.werewolf(let l), .werewolf(let r)): return l == r
      case (.halfBlood(let l), .halfBlood(let r)): return l == r
      case (.sheriff(let l), .sheriff(let r)): return l == r
      default: return false
      }
    }
  #endif
  }

  struct CompleteDarknessAction {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct SeerAction {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var seatID: String = String()

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct WitchAction {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var poisonSeatID: String = String()

    var cureSeatID: String = String()

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct HunterAction {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct GuardAction {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var seatID: String = String()

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct WerewolfAction {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var seatID: String = String()

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct HalfBloodAction {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var seatID: String = String()

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct CompleteSheriffAction {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Werewolf_TakeActionResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var result: OneOf_Result? {
    get {return _storage._result}
    set {_uniqueStorage()._result = newValue}
  }

  var seer: Werewolf_TakeActionResponse.SeerResult {
    get {
      if case .seer(let v)? = _storage._result {return v}
      return Werewolf_TakeActionResponse.SeerResult()
    }
    set {_uniqueStorage()._result = .seer(newValue)}
  }

  var hunter: Werewolf_TakeActionResponse.HunterResult {
    get {
      if case .hunter(let v)? = _storage._result {return v}
      return Werewolf_TakeActionResponse.HunterResult()
    }
    set {_uniqueStorage()._result = .hunter(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Result: Equatable {
    case seer(Werewolf_TakeActionResponse.SeerResult)
    case hunter(Werewolf_TakeActionResponse.HunterResult)

  #if !swift(>=4.1)
    static func ==(lhs: Werewolf_TakeActionResponse.OneOf_Result, rhs: Werewolf_TakeActionResponse.OneOf_Result) -> Bool {
      switch (lhs, rhs) {
      case (.seer(let l), .seer(let r)): return l == r
      case (.hunter(let l), .hunter(let r)): return l == r
      default: return false
      }
    }
  #endif
  }

  struct SeerResult {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var ruling: Werewolf_Ruling = .unknownRuling

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct HunterResult {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var ruling: Werewolf_Ruling = .unknownRuling

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Werewolf_Room {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var seats: [Werewolf_Seat] {
    get {return _storage._seats}
    set {_uniqueStorage()._seats = newValue}
  }

  var game: Werewolf_Game {
    get {return _storage._game ?? Werewolf_Game()}
    set {_uniqueStorage()._game = newValue}
  }
  /// Returns true if `game` has been explicitly set.
  var hasGame: Bool {return _storage._game != nil}
  /// Clears the value of `game`. Subsequent reads from it will return its default value.
  mutating func clearGame() {_uniqueStorage()._game = nil}

  var hostID: String {
    get {return _storage._hostID}
    set {_uniqueStorage()._hostID = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Werewolf_Seat {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: String {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  var user: Werewolf_User {
    get {return _storage._user ?? Werewolf_User()}
    set {_uniqueStorage()._user = newValue}
  }
  /// Returns true if `user` has been explicitly set.
  var hasUser: Bool {return _storage._user != nil}
  /// Clears the value of `user`. Subsequent reads from it will return its default value.
  mutating func clearUser() {_uniqueStorage()._user = nil}

  var role: Werewolf_Role {
    get {return _storage._role}
    set {_uniqueStorage()._role = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Werewolf_User {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: String = String()

  var imgURL: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Werewolf_Game {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: String = String()

  var state: Werewolf_Game.State = .unknown

  var killedSeatIds: [String] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum State: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case unknown // = 0
    case orphanAwake // = 1
    case halfBloodAwake // = 2
    case guardianAwake // = 3
    case werewolfAwake // = 4
    case witchAwake // = 5
    case seerAwake // = 6
    case hunterAwake // = 7
    case sheriffElection // = 8
    case UNRECOGNIZED(Int)

    init() {
      self = .unknown
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unknown
      case 1: self = .orphanAwake
      case 2: self = .halfBloodAwake
      case 3: self = .guardianAwake
      case 4: self = .werewolfAwake
      case 5: self = .witchAwake
      case 6: self = .seerAwake
      case 7: self = .hunterAwake
      case 8: self = .sheriffElection
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .unknown: return 0
      case .orphanAwake: return 1
      case .halfBloodAwake: return 2
      case .guardianAwake: return 3
      case .werewolfAwake: return 4
      case .witchAwake: return 5
      case .seerAwake: return 6
      case .hunterAwake: return 7
      case .sheriffElection: return 8
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  init() {}
}

#if swift(>=4.2)

extension Werewolf_Game.State: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Werewolf_Game.State] = [
    .unknown,
    .orphanAwake,
    .halfBloodAwake,
    .guardianAwake,
    .werewolfAwake,
    .witchAwake,
    .seerAwake,
    .hunterAwake,
    .sheriffElection,
  ]
}

#endif  // swift(>=4.2)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "werewolf"

extension Werewolf_Role: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNKNOWN"),
    1: .same(proto: "VILLAGER"),
    2: .same(proto: "SEER"),
    3: .same(proto: "WITCH"),
    4: .same(proto: "HUNTER"),
    5: .same(proto: "IDIOT"),
    6: .same(proto: "GUARDIAN"),
    7: .same(proto: "WEREWOLF"),
    8: .same(proto: "WHITE_WEREWOLF"),
    9: .same(proto: "ORPHAN"),
    10: .same(proto: "HALF_BLOOD"),
  ]
}

extension Werewolf_Ruling: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNKNOWN_RULING"),
    1: .same(proto: "POSITIVE"),
    2: .same(proto: "NEGATIVE"),
  ]
}

extension Werewolf_VacateSeatRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".VacateSeatRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "seat_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.seatID)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.seatID.isEmpty {
      try visitor.visitSingularStringField(value: self.seatID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Werewolf_VacateSeatRequest, rhs: Werewolf_VacateSeatRequest) -> Bool {
    if lhs.seatID != rhs.seatID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Werewolf_VacateSeatResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".VacateSeatResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Werewolf_VacateSeatResponse, rhs: Werewolf_VacateSeatResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Werewolf_CreateAndJoinRoomRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CreateAndJoinRoomRequest"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Werewolf_CreateAndJoinRoomRequest, rhs: Werewolf_CreateAndJoinRoomRequest) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Werewolf_CreateAndJoinRoomResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CreateAndJoinRoomResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "room_id"),
    2: .standard(proto: "user_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.roomID)
      case 2: try decoder.decodeSingularStringField(value: &self.userID)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.roomID.isEmpty {
      try visitor.visitSingularStringField(value: self.roomID, fieldNumber: 1)
    }
    if !self.userID.isEmpty {
      try visitor.visitSingularStringField(value: self.userID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Werewolf_CreateAndJoinRoomResponse, rhs: Werewolf_CreateAndJoinRoomResponse) -> Bool {
    if lhs.roomID != rhs.roomID {return false}
    if lhs.userID != rhs.userID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Werewolf_UpdateGameConfigRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UpdateGameConfigRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "room_id"),
    2: .standard(proto: "role_counts"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.roomID)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.roleCounts)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.roomID.isEmpty {
      try visitor.visitSingularStringField(value: self.roomID, fieldNumber: 1)
    }
    if !self.roleCounts.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.roleCounts, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Werewolf_UpdateGameConfigRequest, rhs: Werewolf_UpdateGameConfigRequest) -> Bool {
    if lhs.roomID != rhs.roomID {return false}
    if lhs.roleCounts != rhs.roleCounts {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Werewolf_UpdateGameConfigRequest.RoleCount: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Werewolf_UpdateGameConfigRequest.protoMessageName + ".RoleCount"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "role"),
    2: .same(proto: "count"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.role)
      case 2: try decoder.decodeSingularInt32Field(value: &self.count)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.role != .unknown {
      try visitor.visitSingularEnumField(value: self.role, fieldNumber: 1)
    }
    if self.count != 0 {
      try visitor.visitSingularInt32Field(value: self.count, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Werewolf_UpdateGameConfigRequest.RoleCount, rhs: Werewolf_UpdateGameConfigRequest.RoleCount) -> Bool {
    if lhs.role != rhs.role {return false}
    if lhs.count != rhs.count {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Werewolf_UpdateGameConfigResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UpdateGameConfigResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Werewolf_UpdateGameConfigResponse, rhs: Werewolf_UpdateGameConfigResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Werewolf_JoinRoomRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".JoinRoomRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "user_id"),
    2: .standard(proto: "room_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.userID)
      case 2: try decoder.decodeSingularStringField(value: &self.roomID)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.userID.isEmpty {
      try visitor.visitSingularStringField(value: self.userID, fieldNumber: 1)
    }
    if !self.roomID.isEmpty {
      try visitor.visitSingularStringField(value: self.roomID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Werewolf_JoinRoomRequest, rhs: Werewolf_JoinRoomRequest) -> Bool {
    if lhs.userID != rhs.userID {return false}
    if lhs.roomID != rhs.roomID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Werewolf_JoinRoomResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".JoinRoomResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "user_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.userID)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.userID.isEmpty {
      try visitor.visitSingularStringField(value: self.userID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Werewolf_JoinRoomResponse, rhs: Werewolf_JoinRoomResponse) -> Bool {
    if lhs.userID != rhs.userID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Werewolf_GetRoomRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetRoomRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "room_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.roomID)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.roomID.isEmpty {
      try visitor.visitSingularStringField(value: self.roomID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Werewolf_GetRoomRequest, rhs: Werewolf_GetRoomRequest) -> Bool {
    if lhs.roomID != rhs.roomID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Werewolf_GetRoomResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetRoomResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "room"),
  ]

  fileprivate class _StorageClass {
    var _room: Werewolf_Room? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _room = source._room
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._room)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._room {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Werewolf_GetRoomResponse, rhs: Werewolf_GetRoomResponse) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._room != rhs_storage._room {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Werewolf_TakeSeatRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TakeSeatRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "seat_id"),
    2: .standard(proto: "user_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.seatID)
      case 2: try decoder.decodeSingularStringField(value: &self.userID)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.seatID.isEmpty {
      try visitor.visitSingularStringField(value: self.seatID, fieldNumber: 1)
    }
    if !self.userID.isEmpty {
      try visitor.visitSingularStringField(value: self.userID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Werewolf_TakeSeatRequest, rhs: Werewolf_TakeSeatRequest) -> Bool {
    if lhs.seatID != rhs.seatID {return false}
    if lhs.userID != rhs.userID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Werewolf_TakeSeatResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TakeSeatResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Werewolf_TakeSeatResponse, rhs: Werewolf_TakeSeatResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Werewolf_ReassignRolesRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ReassignRolesRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "room_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.roomID)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.roomID.isEmpty {
      try visitor.visitSingularStringField(value: self.roomID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Werewolf_ReassignRolesRequest, rhs: Werewolf_ReassignRolesRequest) -> Bool {
    if lhs.roomID != rhs.roomID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Werewolf_ReassignRolesResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ReassignRolesResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Werewolf_ReassignRolesResponse, rhs: Werewolf_ReassignRolesResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Werewolf_StartGameRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".StartGameRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "room_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.roomID)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.roomID.isEmpty {
      try visitor.visitSingularStringField(value: self.roomID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Werewolf_StartGameRequest, rhs: Werewolf_StartGameRequest) -> Bool {
    if lhs.roomID != rhs.roomID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Werewolf_StartGameResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".StartGameResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Werewolf_StartGameResponse, rhs: Werewolf_StartGameResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Werewolf_TakeActionRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TakeActionRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "game_id"),
    2: .same(proto: "darkness"),
    3: .same(proto: "seer"),
    4: .same(proto: "witch"),
    5: .same(proto: "hunter"),
    6: .same(proto: "guard"),
    7: .same(proto: "werewolf"),
    8: .standard(proto: "half_blood"),
    9: .same(proto: "sheriff"),
  ]

  fileprivate class _StorageClass {
    var _gameID: String = String()
    var _action: Werewolf_TakeActionRequest.OneOf_Action?

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _gameID = source._gameID
      _action = source._action
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._gameID)
        case 2:
          var v: Werewolf_TakeActionRequest.CompleteDarknessAction?
          if let current = _storage._action {
            try decoder.handleConflictingOneOf()
            if case .darkness(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._action = .darkness(v)}
        case 3:
          var v: Werewolf_TakeActionRequest.SeerAction?
          if let current = _storage._action {
            try decoder.handleConflictingOneOf()
            if case .seer(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._action = .seer(v)}
        case 4:
          var v: Werewolf_TakeActionRequest.WitchAction?
          if let current = _storage._action {
            try decoder.handleConflictingOneOf()
            if case .witch(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._action = .witch(v)}
        case 5:
          var v: Werewolf_TakeActionRequest.HunterAction?
          if let current = _storage._action {
            try decoder.handleConflictingOneOf()
            if case .hunter(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._action = .hunter(v)}
        case 6:
          var v: Werewolf_TakeActionRequest.GuardAction?
          if let current = _storage._action {
            try decoder.handleConflictingOneOf()
            if case .guard(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._action = .guard(v)}
        case 7:
          var v: Werewolf_TakeActionRequest.WerewolfAction?
          if let current = _storage._action {
            try decoder.handleConflictingOneOf()
            if case .werewolf(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._action = .werewolf(v)}
        case 8:
          var v: Werewolf_TakeActionRequest.HalfBloodAction?
          if let current = _storage._action {
            try decoder.handleConflictingOneOf()
            if case .halfBlood(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._action = .halfBlood(v)}
        case 9:
          var v: Werewolf_TakeActionRequest.CompleteSheriffAction?
          if let current = _storage._action {
            try decoder.handleConflictingOneOf()
            if case .sheriff(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._action = .sheriff(v)}
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._gameID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._gameID, fieldNumber: 1)
      }
      switch _storage._action {
      case .darkness(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      case .seer(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      case .witch(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      case .hunter(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      case .guard(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      case .werewolf(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      case .halfBlood(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      case .sheriff(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      case nil: break
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Werewolf_TakeActionRequest, rhs: Werewolf_TakeActionRequest) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._gameID != rhs_storage._gameID {return false}
        if _storage._action != rhs_storage._action {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Werewolf_TakeActionRequest.CompleteDarknessAction: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Werewolf_TakeActionRequest.protoMessageName + ".CompleteDarknessAction"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Werewolf_TakeActionRequest.CompleteDarknessAction, rhs: Werewolf_TakeActionRequest.CompleteDarknessAction) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Werewolf_TakeActionRequest.SeerAction: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Werewolf_TakeActionRequest.protoMessageName + ".SeerAction"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "seat_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.seatID)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.seatID.isEmpty {
      try visitor.visitSingularStringField(value: self.seatID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Werewolf_TakeActionRequest.SeerAction, rhs: Werewolf_TakeActionRequest.SeerAction) -> Bool {
    if lhs.seatID != rhs.seatID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Werewolf_TakeActionRequest.WitchAction: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Werewolf_TakeActionRequest.protoMessageName + ".WitchAction"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "poison_seat_id"),
    2: .standard(proto: "cure_seat_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.poisonSeatID)
      case 2: try decoder.decodeSingularStringField(value: &self.cureSeatID)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.poisonSeatID.isEmpty {
      try visitor.visitSingularStringField(value: self.poisonSeatID, fieldNumber: 1)
    }
    if !self.cureSeatID.isEmpty {
      try visitor.visitSingularStringField(value: self.cureSeatID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Werewolf_TakeActionRequest.WitchAction, rhs: Werewolf_TakeActionRequest.WitchAction) -> Bool {
    if lhs.poisonSeatID != rhs.poisonSeatID {return false}
    if lhs.cureSeatID != rhs.cureSeatID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Werewolf_TakeActionRequest.HunterAction: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Werewolf_TakeActionRequest.protoMessageName + ".HunterAction"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Werewolf_TakeActionRequest.HunterAction, rhs: Werewolf_TakeActionRequest.HunterAction) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Werewolf_TakeActionRequest.GuardAction: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Werewolf_TakeActionRequest.protoMessageName + ".GuardAction"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "seat_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.seatID)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.seatID.isEmpty {
      try visitor.visitSingularStringField(value: self.seatID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Werewolf_TakeActionRequest.GuardAction, rhs: Werewolf_TakeActionRequest.GuardAction) -> Bool {
    if lhs.seatID != rhs.seatID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Werewolf_TakeActionRequest.WerewolfAction: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Werewolf_TakeActionRequest.protoMessageName + ".WerewolfAction"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "seat_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.seatID)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.seatID.isEmpty {
      try visitor.visitSingularStringField(value: self.seatID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Werewolf_TakeActionRequest.WerewolfAction, rhs: Werewolf_TakeActionRequest.WerewolfAction) -> Bool {
    if lhs.seatID != rhs.seatID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Werewolf_TakeActionRequest.HalfBloodAction: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Werewolf_TakeActionRequest.protoMessageName + ".HalfBloodAction"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "seat_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.seatID)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.seatID.isEmpty {
      try visitor.visitSingularStringField(value: self.seatID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Werewolf_TakeActionRequest.HalfBloodAction, rhs: Werewolf_TakeActionRequest.HalfBloodAction) -> Bool {
    if lhs.seatID != rhs.seatID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Werewolf_TakeActionRequest.CompleteSheriffAction: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Werewolf_TakeActionRequest.protoMessageName + ".CompleteSheriffAction"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Werewolf_TakeActionRequest.CompleteSheriffAction, rhs: Werewolf_TakeActionRequest.CompleteSheriffAction) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Werewolf_TakeActionResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TakeActionResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "seer"),
    2: .same(proto: "hunter"),
  ]

  fileprivate class _StorageClass {
    var _result: Werewolf_TakeActionResponse.OneOf_Result?

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _result = source._result
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1:
          var v: Werewolf_TakeActionResponse.SeerResult?
          if let current = _storage._result {
            try decoder.handleConflictingOneOf()
            if case .seer(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._result = .seer(v)}
        case 2:
          var v: Werewolf_TakeActionResponse.HunterResult?
          if let current = _storage._result {
            try decoder.handleConflictingOneOf()
            if case .hunter(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._result = .hunter(v)}
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      switch _storage._result {
      case .seer(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      case .hunter(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      case nil: break
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Werewolf_TakeActionResponse, rhs: Werewolf_TakeActionResponse) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._result != rhs_storage._result {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Werewolf_TakeActionResponse.SeerResult: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Werewolf_TakeActionResponse.protoMessageName + ".SeerResult"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "ruling"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.ruling)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.ruling != .unknownRuling {
      try visitor.visitSingularEnumField(value: self.ruling, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Werewolf_TakeActionResponse.SeerResult, rhs: Werewolf_TakeActionResponse.SeerResult) -> Bool {
    if lhs.ruling != rhs.ruling {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Werewolf_TakeActionResponse.HunterResult: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Werewolf_TakeActionResponse.protoMessageName + ".HunterResult"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "ruling"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.ruling)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.ruling != .unknownRuling {
      try visitor.visitSingularEnumField(value: self.ruling, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Werewolf_TakeActionResponse.HunterResult, rhs: Werewolf_TakeActionResponse.HunterResult) -> Bool {
    if lhs.ruling != rhs.ruling {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Werewolf_Room: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Room"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "seats"),
    2: .same(proto: "game"),
    3: .standard(proto: "host_id"),
  ]

  fileprivate class _StorageClass {
    var _seats: [Werewolf_Seat] = []
    var _game: Werewolf_Game? = nil
    var _hostID: String = String()

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _seats = source._seats
      _game = source._game
      _hostID = source._hostID
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeRepeatedMessageField(value: &_storage._seats)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._game)
        case 3: try decoder.decodeSingularStringField(value: &_storage._hostID)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._seats.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._seats, fieldNumber: 1)
      }
      if let v = _storage._game {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if !_storage._hostID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._hostID, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Werewolf_Room, rhs: Werewolf_Room) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._seats != rhs_storage._seats {return false}
        if _storage._game != rhs_storage._game {return false}
        if _storage._hostID != rhs_storage._hostID {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Werewolf_Seat: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Seat"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "user"),
    3: .same(proto: "role"),
  ]

  fileprivate class _StorageClass {
    var _id: String = String()
    var _user: Werewolf_User? = nil
    var _role: Werewolf_Role = .unknown

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _user = source._user
      _role = source._role
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._id)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._user)
        case 3: try decoder.decodeSingularEnumField(value: &_storage._role)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._id.isEmpty {
        try visitor.visitSingularStringField(value: _storage._id, fieldNumber: 1)
      }
      if let v = _storage._user {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if _storage._role != .unknown {
        try visitor.visitSingularEnumField(value: _storage._role, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Werewolf_Seat, rhs: Werewolf_Seat) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._id != rhs_storage._id {return false}
        if _storage._user != rhs_storage._user {return false}
        if _storage._role != rhs_storage._role {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Werewolf_User: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".User"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    3: .standard(proto: "img_url"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.id)
      case 3: try decoder.decodeSingularStringField(value: &self.imgURL)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.imgURL.isEmpty {
      try visitor.visitSingularStringField(value: self.imgURL, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Werewolf_User, rhs: Werewolf_User) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.imgURL != rhs.imgURL {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Werewolf_Game: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Game"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "state"),
    3: .standard(proto: "killed_seat_ids"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.id)
      case 2: try decoder.decodeSingularEnumField(value: &self.state)
      case 3: try decoder.decodeRepeatedStringField(value: &self.killedSeatIds)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if self.state != .unknown {
      try visitor.visitSingularEnumField(value: self.state, fieldNumber: 2)
    }
    if !self.killedSeatIds.isEmpty {
      try visitor.visitRepeatedStringField(value: self.killedSeatIds, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Werewolf_Game, rhs: Werewolf_Game) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.state != rhs.state {return false}
    if lhs.killedSeatIds != rhs.killedSeatIds {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Werewolf_Game.State: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNKNOWN"),
    1: .same(proto: "ORPHAN_AWAKE"),
    2: .same(proto: "HALF_BLOOD_AWAKE"),
    3: .same(proto: "GUARDIAN_AWAKE"),
    4: .same(proto: "WEREWOLF_AWAKE"),
    5: .same(proto: "WITCH_AWAKE"),
    6: .same(proto: "SEER_AWAKE"),
    7: .same(proto: "HUNTER_AWAKE"),
    8: .same(proto: "SHERIFF_ELECTION"),
  ]
}
