//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: room/room.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import Foundation
import Dispatch
import SwiftGRPC
import SwiftProtobuf

internal protocol Room_RoomServiceCreateRoomCall: ClientCallUnary {}

fileprivate final class Room_RoomServiceCreateRoomCallBase: ClientCallUnaryBase<Room_CreateRoomRequest, Room_CreateRoomResponse>, Room_RoomServiceCreateRoomCall {
  override class var method: String { return "/room.RoomService/CreateRoom" }
}

internal protocol Room_RoomServiceJoinRoomCall: ClientCallUnary {}

fileprivate final class Room_RoomServiceJoinRoomCallBase: ClientCallUnaryBase<Room_JoinRoomRequest, Room_JoinRoomResponse>, Room_RoomServiceJoinRoomCall {
  override class var method: String { return "/room.RoomService/JoinRoom" }
}


/// Instantiate Room_RoomServiceServiceClient, then call methods of this protocol to make API calls.
internal protocol Room_RoomServiceService: ServiceClient {
  /// Synchronous. Unary.
  func createRoom(_ request: Room_CreateRoomRequest) throws -> Room_CreateRoomResponse
  /// Asynchronous. Unary.
  func createRoom(_ request: Room_CreateRoomRequest, completion: @escaping (Room_CreateRoomResponse?, CallResult) -> Void) throws -> Room_RoomServiceCreateRoomCall

  /// Synchronous. Unary.
  func joinRoom(_ request: Room_JoinRoomRequest) throws -> Room_JoinRoomResponse
  /// Asynchronous. Unary.
  func joinRoom(_ request: Room_JoinRoomRequest, completion: @escaping (Room_JoinRoomResponse?, CallResult) -> Void) throws -> Room_RoomServiceJoinRoomCall

}

internal final class Room_RoomServiceServiceClient: ServiceClientBase, Room_RoomServiceService {
  /// Synchronous. Unary.
  internal func createRoom(_ request: Room_CreateRoomRequest) throws -> Room_CreateRoomResponse {
    return try Room_RoomServiceCreateRoomCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func createRoom(_ request: Room_CreateRoomRequest, completion: @escaping (Room_CreateRoomResponse?, CallResult) -> Void) throws -> Room_RoomServiceCreateRoomCall {
    return try Room_RoomServiceCreateRoomCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func joinRoom(_ request: Room_JoinRoomRequest) throws -> Room_JoinRoomResponse {
    return try Room_RoomServiceJoinRoomCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func joinRoom(_ request: Room_JoinRoomRequest, completion: @escaping (Room_JoinRoomResponse?, CallResult) -> Void) throws -> Room_RoomServiceJoinRoomCall {
    return try Room_RoomServiceJoinRoomCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

}

class Room_RoomServiceServiceTestStub: ServiceClientTestStubBase, Room_RoomServiceService {
  var createRoomRequests: [Room_CreateRoomRequest] = []
  var createRoomResponses: [Room_CreateRoomResponse] = []
  func createRoom(_ request: Room_CreateRoomRequest) throws -> Room_CreateRoomResponse {
    createRoomRequests.append(request)
    defer { createRoomResponses.removeFirst() }
    return createRoomResponses.first!
  }
  func createRoom(_ request: Room_CreateRoomRequest, completion: @escaping (Room_CreateRoomResponse?, CallResult) -> Void) throws -> Room_RoomServiceCreateRoomCall {
    fatalError("not implemented")
  }

  var joinRoomRequests: [Room_JoinRoomRequest] = []
  var joinRoomResponses: [Room_JoinRoomResponse] = []
  func joinRoom(_ request: Room_JoinRoomRequest) throws -> Room_JoinRoomResponse {
    joinRoomRequests.append(request)
    defer { joinRoomResponses.removeFirst() }
    return joinRoomResponses.first!
  }
  func joinRoom(_ request: Room_JoinRoomRequest, completion: @escaping (Room_JoinRoomResponse?, CallResult) -> Void) throws -> Room_RoomServiceJoinRoomCall {
    fatalError("not implemented")
  }

}

/// To build a server, implement a class that conforms to this protocol.
internal protocol Room_RoomServiceProvider {
  func createRoom(request: Room_CreateRoomRequest, session: Room_RoomServiceCreateRoomSession) throws -> Room_CreateRoomResponse
  func joinRoom(request: Room_JoinRoomRequest, session: Room_RoomServiceJoinRoomSession) throws -> Room_JoinRoomResponse
}

internal protocol Room_RoomServiceCreateRoomSession: ServerSessionUnary {}

fileprivate final class Room_RoomServiceCreateRoomSessionBase: ServerSessionUnaryBase<Room_CreateRoomRequest, Room_CreateRoomResponse>, Room_RoomServiceCreateRoomSession {}

class Room_RoomServiceCreateRoomSessionTestStub: ServerSessionUnaryTestStub, Room_RoomServiceCreateRoomSession {}

internal protocol Room_RoomServiceJoinRoomSession: ServerSessionUnary {}

fileprivate final class Room_RoomServiceJoinRoomSessionBase: ServerSessionUnaryBase<Room_JoinRoomRequest, Room_JoinRoomResponse>, Room_RoomServiceJoinRoomSession {}

class Room_RoomServiceJoinRoomSessionTestStub: ServerSessionUnaryTestStub, Room_RoomServiceJoinRoomSession {}


/// Main server for generated service
internal final class Room_RoomServiceServer: ServiceServer {
  private let provider: Room_RoomServiceProvider

  internal init(address: String, provider: Room_RoomServiceProvider) {
    self.provider = provider
    super.init(address: address)
  }

  internal init?(address: String, certificateURL: URL, keyURL: URL, provider: Room_RoomServiceProvider) {
    self.provider = provider
    super.init(address: address, certificateURL: certificateURL, keyURL: keyURL)
  }

  internal init?(address: String, certificateString: String, keyString: String, provider: Room_RoomServiceProvider) {
    self.provider = provider
    super.init(address: address, certificateString: certificateString, keyString: keyString)
  }

  /// Start the server.
  internal override func handleMethod(_ method: String, handler: Handler, queue: DispatchQueue) throws -> Bool {
    let provider = self.provider
    switch method {
    case "/room.RoomService/CreateRoom":
      try Room_RoomServiceCreateRoomSessionBase(
        handler: handler,
        providerBlock: { try provider.createRoom(request: $0, session: $1 as! Room_RoomServiceCreateRoomSessionBase) })
          .run(queue: queue)
      return true
    case "/room.RoomService/JoinRoom":
      try Room_RoomServiceJoinRoomSessionBase(
        handler: handler,
        providerBlock: { try provider.joinRoom(request: $0, session: $1 as! Room_RoomServiceJoinRoomSessionBase) })
          .run(queue: queue)
      return true
    default:
      return false
    }
  }
}

